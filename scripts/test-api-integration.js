// Test script ƒë·ªÉ ki·ªÉm tra t√≠ch h·ª£p API th·ª±c t·∫ø
// Ch·∫°y: node test-api-integration.js

const { tradingApiService } = require('../lib/tradingApiService');
const { enhancedTrailingStopService } = require('../lib/enhancedTrailingStopService');

async function testApiIntegration() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test t√≠ch h·ª£p API th·ª±c t·∫ø...\n');

  // Test 1: Ki·ªÉm tra API Health
  console.log('üìä Test 1: Ki·ªÉm tra API Health');
  try {
    const healthCheck = await enhancedTrailingStopService.checkApiHealth();
    console.log('‚úÖ API Health Check:', healthCheck);
    
    if (!healthCheck.isHealthy) {
      console.log('‚ö†Ô∏è  C·∫£nh b√°o: API kh√¥ng ho·∫°t ƒë·ªông t·ªët:', healthCheck.errors);
    }
  } catch (error) {
    console.log('‚ùå L·ªói API Health Check:', error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 2: Test getCurrentPrice v·ªõi c√°c coins kh√°c nhau
  console.log('üí∞ Test 2: Test getCurrentPrice');
  const testCoins = ['BTC/USDT', 'ETH/USDT', 'PEPE/USDT'];
  
  for (const coin of testCoins) {
    try {
      const price = await tradingApiService.getCurrentPrice(coin);
      console.log(`‚úÖ ${coin}: $${price}`);
      
      // Validate price
      if (!price || isNaN(price) || price <= 0) {
        console.log(`‚ùå Gi√° kh√¥ng h·ª£p l·ªá cho ${coin}: ${price}`);
      }
    } catch (error) {
      console.log(`‚ùå L·ªói l·∫•y gi√° ${coin}:`, error.message);
    }
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 3: Test calculateVolatility
  console.log('üìà Test 3: Test calculateVolatility');
  
  for (const coin of testCoins) {
    try {
      const volatility = await tradingApiService.calculateVolatility(coin);
      console.log(`‚úÖ ${coin} Volatility:`, {
        atr: volatility.atr.toFixed(6),
        volatilityPercent: volatility.volatilityPercent.toFixed(2) + '%',
        trend: volatility.trend,
        strength: volatility.strength
      });
      
      // Validate volatility data
      if (!volatility.atr || isNaN(volatility.atr)) {
        console.log(`‚ùå ATR kh√¥ng h·ª£p l·ªá cho ${coin}`);
      }
    } catch (error) {
      console.log(`‚ùå L·ªói t√≠nh volatility ${coin}:`, error.message);
    }
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 4: Test Position Creation v·ªõi d·ªØ li·ªáu th·ª±c
  console.log('üéØ Test 4: Test Position Creation');
  
  try {
    const testPosition = await enhancedTrailingStopService.createPosition({
      symbol: 'BTC/USDT',
      side: 'sell',
      quantity: 0.001,
      trailingPercent: 2.0,
      strategy: 'percentage'
    });
    
    console.log('‚úÖ Position t·∫°o th√†nh c√¥ng:', {
      id: testPosition.id,
      symbol: testPosition.symbol,
      entryPrice: testPosition.entryPrice,
      currentStopPrice: testPosition.currentStopPrice,
      trailingPercent: testPosition.trailingPercent
    });
    
    // Test position sizing calculation
    if (testPosition.quantity !== 0.001) {
      console.log(`üìä Position size ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh: ${testPosition.quantity}`);
    }
    
  } catch (error) {
    console.log('‚ùå L·ªói t·∫°o position:', error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 5: Test Service Statistics
  console.log('üìä Test 5: Test Service Statistics');
  
  try {
    const stats = enhancedTrailingStopService.getServiceStats();
    console.log('‚úÖ Service Stats:', stats);
  } catch (error) {
    console.log('‚ùå L·ªói l·∫•y stats:', error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 6: Test Cache Performance
  console.log('‚ö° Test 6: Test Cache Performance');
  
  try {
    console.log('üîÑ Test cache performance cho BTC/USDT...');
    
    // First call (should fetch from API)
    const start1 = Date.now();
    const price1 = await tradingApiService.getCurrentPrice('BTC/USDT');
    const time1 = Date.now() - start1;
    
    // Second call (should use cache)
    const start2 = Date.now();
    const price2 = await tradingApiService.getCurrentPrice('BTC/USDT');
    const time2 = Date.now() - start2;
    
    console.log(`‚úÖ L·∫ßn 1 (API): ${time1}ms - Price: $${price1}`);
    console.log(`‚úÖ L·∫ßn 2 (Cache): ${time2}ms - Price: $${price2}`);
    console.log(`üöÄ Cache speedup: ${(time1/time2).toFixed(1)}x faster`);
    
    if (price1 !== price2) {
      console.log('‚ùå Cache kh√¥ng nh·∫•t qu√°n!');
    }
    
  } catch (error) {
    console.log('‚ùå L·ªói test cache:', error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 7: Test Error Handling
  console.log('üõ°Ô∏è  Test 7: Test Error Handling');
  
  try {
    // Test v·ªõi symbol kh√¥ng t·ªìn t·∫°i
    const invalidPrice = await tradingApiService.getCurrentPrice('INVALID/USDT');
    console.log('‚úÖ Fallback price cho INVALID/USDT:', invalidPrice);
    
    // Test v·ªõi volatility cho symbol kh√¥ng t·ªìn t·∫°i
    const invalidVolatility = await tradingApiService.calculateVolatility('INVALID/USDT');
    console.log('‚úÖ Fallback volatility cho INVALID/USDT:', {
      atr: invalidVolatility.atr,
      volatilityPercent: invalidVolatility.volatilityPercent
    });
    
  } catch (error) {
    console.log('‚ùå L·ªói test error handling:', error.message);
  }

  console.log('\nüéâ Ho√†n th√†nh test t√≠ch h·ª£p API!');
  console.log('üìù Ki·ªÉm tra logs tr√™n ƒë·ªÉ xem k·∫øt qu·∫£ chi ti·∫øt.');
}

// Ch·∫°y test
if (require.main === module) {
  testApiIntegration().catch(console.error);
}

module.exports = { testApiIntegration };
