// File: components/BalanceDisplay.tsx
'use client';

import { useEffect, useState, useCallback } from "react";
import { ArrowPathIcon, WalletIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import LoadingOverlay from './LoadingOverlay';

type Balance = {
  free?: Record<string, number>;
  total?: Record<string, number>;
  [key: string]: any;
};

// ƒê·ªãnh nghƒ©a th√¥ng tin c∆° b·∫£n v√† icon cho c√°c coin ph·ªï bi·∫øn
const COIN_INFO: Record<string, { name: string; icon: string }> = {
  BTC: { name: "Bitcoin", icon: "‚Çø" },
  USDT: { name: "Tether", icon: "‚ÇÆ" },
  ETH: { name: "Ethereum", icon: "Œû" },
  BNB: { name: "Binance Coin", icon: "üî∂" },
};

// ƒê·ªãnh d·∫°ng s·ªë v·ªõi ƒë·ªô ch√≠nh x√°c ph√π h·ª£p
const formatAmount = (amount: number, coin: string): string => {
    const options: Intl.NumberFormatOptions = {
        maximumFractionDigits: coin === 'USDT' ? 2 : 8,
        minimumFractionDigits: 2,
    };
    return amount.toLocaleString(undefined, options);
};


export default function BalanceDisplay() {
  const [balance, setBalance] = useState<Balance | null>(null);
  const [loading, setLoading] = useState(true); // B·∫Øt ƒë·∫ßu l√† true
  const [error, setError] = useState<string | null>(null);

  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ tr√°nh t·∫°o l·∫°i h√†m fetchBalance m·ªói l·∫ßn render
  const fetchBalance = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch('/api/balance');
      if (!res.ok) {
        const errData = await res.json().catch(() => ({})); // C·ªë g·∫Øng parse l·ªói json
        throw new Error(errData.message || 'L·ªói khi l·∫•y s·ªë d∆∞');
      }
      const data = await res.json();
      setBalance(data);
    } catch (err: any) {
      console.error("Fetch balance error:", err);
      setError(err.message);
      setBalance(null); // X√≥a s·ªë d∆∞ c≈© n·∫øu c√≥ l·ªói
    } finally {
      setLoading(false);
    }
  }, []); // Kh√¥ng c√≥ dependency, ch·ªâ t·∫°o 1 l·∫ßn

  // L·ªçc v√† l·∫•y th√¥ng tin coin c·∫ßn hi·ªÉn th·ªã
  const getFilteredBalance = () => {
    if (!balance || !balance.free) return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

    // ∆Øu ti√™n c√°c coin ch√≠nh, sau ƒë√≥ th√™m c√°c coin kh√°c c√≥ s·ªë d∆∞ > 0
    const mainCoins = ["USDT", "BTC", "ETH", "BNB"]; // C√°c coin mu·ªën hi·ªÉn th·ªã tr∆∞·ªõc
    const otherCoins = Object.keys(balance.free).filter(coin => !mainCoins.includes(coin) && balance.free![coin] > 0.00001); // L·ªçc coin kh√°c c√≥ s·ªë d∆∞

    const allCoinsToShow = [...mainCoins,];

    return allCoinsToShow
      .filter(coin => balance.free?.[coin] !== undefined) // ƒê·∫£m b·∫£o coin t·ªìn t·∫°i trong 'free'
      .map(coin => ({
        symbol: coin,
        amount: balance.free![coin],
        name: COIN_INFO[coin]?.name || coin, // L·∫•y t√™n ƒë·∫ßy ƒë·ªß ho·∫∑c d√πng symbol
        icon: COIN_INFO[coin]?.icon || coin.charAt(0).toUpperCase(), // L·∫•y icon ho·∫∑c ch·ªØ c√°i ƒë·∫ßu
      }))
       // S·∫Øp x·∫øp: USDT ƒë·∫ßu ti√™n, sau ƒë√≥ theo gi√° tr·ªã ∆∞·ªõc t√≠nh (n·∫øu c√≥) ho·∫∑c alphabet
      .sort((a, b) => {
           if (a.symbol === 'USDT') return -1;
           if (b.symbol === 'USDT') return 1;
           // Th√™m logic sort theo gi√° tr·ªã n·∫øu c√≥ API gi√°
           return a.symbol.localeCompare(b.symbol); // Fallback sort theo t√™n
      });
  };

  const filteredBalanceList = getFilteredBalance();

  useEffect(() => {
    fetchBalance();
  }, [fetchBalance]); // Ch·∫°y fetchBalance khi component mount

  return (
    <LoadingOverlay isLoading={loading} message="Loading balance..." delay={200}>
      <div className="space-y-4">
        {/* Header */}
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <WalletIcon className="w-5 h-5 text-[var(--accent)]" />
            <h3 className="text-lg font-semibold text-[var(--foreground)]">Available Balance</h3>
          </div>
          <button
            onClick={fetchBalance}
            disabled={loading}
            className={`vscode-button-secondary p-2 rounded-md ${loading ? 'animate-spin' : ''}`}
            aria-label="Refresh balance"
          >
            <ArrowPathIcon className="w-4 h-4" />
          </button>
        </div>

        {/* Error State */}
        {!loading && error && (
          <div className="vscode-card bg-[var(--error)] bg-opacity-10 border-[var(--error)] border-opacity-30">
            <div className="flex items-center space-x-3">
              <ExclamationTriangleIcon className="w-5 h-5 text-[var(--error)]" />
              <div>
                <p className="font-medium text-sm text-[var(--error)]">Cannot load balance</p>
                <p className="text-xs text-[var(--error)] opacity-75">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Balance List */}
        {!loading && !error && balance && (
          <div className="space-y-2">
            {filteredBalanceList.length > 0 ? (
              <div className="vscode-card p-0">
                <table className="vscode-table">
                  <thead>
                    <tr>
                      <th className="text-left">Asset</th>
                      <th className="text-right">Available</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredBalanceList.map((coin) => (
                      <tr key={coin.symbol}>
                        <td>
                          <div className="flex items-center space-x-3">
                            <div className="w-8 h-8 rounded-full bg-[var(--sidebar)] flex items-center justify-center text-sm font-semibold text-[var(--foreground)]">
                              {coin.icon}
                            </div>
                            <div>
                              <p className="font-semibold text-[var(--foreground)]">{coin.symbol}</p>
                              <p className="text-xs text-[var(--muted)]">{coin.name}</p>
                            </div>
                          </div>
                        </td>
                        <td className="text-right">
                          <span className="font-mono text-[var(--foreground)]">
                            {formatAmount(coin.amount, coin.symbol)}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="vscode-card text-center py-8">
                <p className="text-[var(--muted)]">No significant balance found.</p>
              </div>
            )}
          </div>
        )}
        {!loading && !error && !balance && (
          <div className="vscode-card text-center py-8">
            <p className="text-[var(--muted)]">No balance data available.</p>
          </div>
        )}
      </div>
    </LoadingOverlay>
  );
}